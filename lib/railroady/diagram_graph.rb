# RailRoady - RoR diagrams generator
# http://railroad.rubyforge.org
#
# Copyright 2007-2008 - Javier Smaldone (http://www.smaldone.com.ar)
# See COPYING for more details


# RailRoady diagram structure
class DiagramGraph

  attr_reader :edges

  def initialize
    @diagram_type = ''
    @show_label   = false
    @alphabetize  = false
    @nodes = []
    @edges = []
  end

  def add_node(node)
    @nodes << node
  end

  def add_edge(edge)
    @edges << edge
  end

  def delete_similar_edge(similar)
    i = @edges.index { |edge| (similar - edge).empty? }
    i && @edges.delete_at(i)
  end

  def diagram_type= (type)
    @diagram_type = type
  end

  def show_label= (value)
    @show_label = value
  end

  def alphabetize= (flag)
    @alphabetize = flag
  end


  # Generate DOT graph
  def to_dot
    return dot_header +
           @nodes.map{|n| dot_node n[0], n[1], n[2], n[3]}.join +
           @edges.map{|e| dot_edge e[0], e[1], e[2], e[3]}.join +
           dot_footer
  end

  # Generate XMI diagram (not yet implemented)
  def to_xmi
     STDERR.print "Sorry. XMI output not yet implemented.\n\n"
     return ""
  end

  private

  # Build DOT diagram header
  def dot_header
    result = "digraph #{@diagram_type.downcase}_diagram {\n" +
             "\tgraph[overlap=false, splines=true, bgcolor=\"none\"]\n"
    result += dot_label if @show_label
    return result
  end

  # Build DOT diagram footer
  def dot_footer
    return "}\n"
  end

  # Build diagram label
  def dot_label
    return "\t_diagram_info [shape=\"plaintext\", " +
           "label=\"#{@diagram_type} diagram\\l" +
           "Date: #{Time.now.strftime "%b %d %Y - %H:%M"}\\l" +
           (defined?(ActiveRecord::Migrator) ? "Migration version: " +
            "#{ActiveRecord::Migrator.current_version}\\l" : "") +
           "Generated by #{APP_HUMAN_NAME} #{APP_VERSION}\\l"+
		   "http://railroady.prestonlee.com" +
           "\\l\", fontsize=13]\n"
  end

  # Build a DOT graph node
  def dot_node(type, name, attributes=nil, custom_options='')
    case type
      when 'model'
           options = 'shape=Mrecord, label="{' + name + '|'
           options += attributes.sort_by { |s| @alphabetize ? s : nil }.join('\l')
           options += '\l}"'
      when 'model-brief'
           options = 'shape=oval, style=filled, fillcolor="#aaaaaa"'
      when 'class'
           options = 'shape=record, label="{' + name + '|}"'
      when 'class-brief'
           options = 'shape=box'
      when 'controller'
           options = 'shape=Mrecord, label="{' + name + '|'
           public_methods    = attributes[:public].sort_by    { |s| @alphabetize ? s : nil }.join('\l')
           protected_methods = attributes[:protected].sort_by { |s| @alphabetize ? s : nil }.join('\l')
           private_methods   = attributes[:private].sort_by   { |s| @alphabetize ? s : nil }.join('\l')
           options += public_methods + '\l|' + protected_methods + '\l|' +
                      private_methods + '\l'
           options += '}"'
      when 'controller-brief'
           options = ''
      when 'module'
           options = 'shape=box, style=dotted, label="' + name + '"'
      when 'aasm'
           # Return subgraph format
           return "subgraph cluster_#{name.downcase} {\n\tlabel = #{quote(name)}\n\t#{attributes.join("\n  ")}}"
    end # case

    if name == "User" 
      options += ', style=filled, fillcolor="#000000", fontcolor="#FFFFFF"'
    elsif name.start_with?("Coach") 
      options += ', style=filled, fillcolor="#000000", fontcolor="#FFFFFF"'
    elsif name.start_with?("User") 
      options += ', style=filled, fillcolor="#41A8F1"' 
    elsif name.start_with?("Facebook") 
      options += ', style=filled, fillcolor="#2A6D9E"' 
    elsif name.start_with?("Payment") 
      options += ', style=filled, fillcolor="#487F2D"' 
    elsif name.start_with?("Nutrition") 
      options += ', style=filled, fillcolor="#B2BB6D"' 
    elsif name.start_with?("Referral") 
      options += ', style=filled, fillcolor="#ED9EDD"' 
    elsif name.start_with?("Notification") 
      options += ', style=filled, fillcolor="#FF5748"' 
    end


    options = [options, custom_options].compact.join(', ')
    return "\t#{quote(name)} [#{options}]\n"
  end # dot_node

  # Build a DOT graph edge
  def dot_edge(type, from, to, name = '')
    options =  name != '' ? "label=\"#{name}\", " : ''
    case type

      when 'one-?(belongs_to)'
           options += 'arrowtail=dot,    arrowhead=none ,  dir=both color="#000000", penwidth=1'

      when 'one-one'
           options += 'arrowtail=dot,    arrowhead=crow,   dir=both color="#2222FF", penwidth=1'
      when 'one-one(has_one)'
           options += 'arrowtail=odot,   arrowhead=crow ,  dir=both color="#2222FF", penwidth=3' 

      when 'one-many'
           options += 'arrowtail=dot,    arrowhead=crow ,  dir=both color="#FF2222", penwidth=1' 
      when 'one-many(has_many)'
           options += 'arrowtail=odot,   arrowhead=crow ,  dir=both color="#FF2222", penwidth=3' #0 
           
      when 'one-one-and-many'
           options += 'arrowtail=dot,    arrowhead=crow ,  dir=both color="#FF22FF", penwidth=1' 


      when 'many-many'
        options += 'arrowtail=crow,    arrowhead=crow,   dir=both color="#22FF22", penwidth=1'
      when 'many-many(uni)'
        options += 'arrowtail=crow,    arrowhead=none,   dir=both color="#22FF22", penwidth=1'

      #when 'one-many'
      #     options += 'arrowtail=nomal,      arrowhead=dot,  dir=both color="#%02X%02X%02X"' % [000, 200, 000]
      #when 'many-many'
      #     options += 'arrowtail=crow,      arrowhead=crow,  dir=both color="#%02X%02X%02X"' % [100, 000, 000]
      #when 'one-one(bt)'
      #     options += 'arrowtail=odot,      arrowhead=none,  dir=both color="#%02X%02X%02X"' % [255, 000, 100]
           
      when 'is-a'
           options += 'arrowtail="onormal", arrowhead="none" dir=both color="#%02X%02X%02X"' % [222, 200, 000]
      when 'event'
           options += "fontsize=10"
      else
           options += 'arrowtail=none,    arrowhead=odot ,  dir=both color="#%02X%02X%02X"' % [256, 222, 222]
    end
    return "\t#{quote(from)} -> #{quote(to)} [#{options}]\n"
  end # dot_edge

  # Quotes a class name
  def quote(name)
    '"' + name.to_s + '"'
  end

end # class DiagramGraph
